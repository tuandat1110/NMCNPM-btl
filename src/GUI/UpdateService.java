/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author ADMIN
 */
public class UpdateService extends javax.swing.JFrame {

    /**
     * Creates new form UpdateService
     */
    public UpdateService() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Yu Gothic UI", 1, 18)); // NOI18N
        jLabel1.setText("Update Service");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null}
            },
            new String [] {
                "ID", "Quantity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Delete");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        jButton2.setText("Update");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 662, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2)))
                .addGap(63, 63, 63))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(324, 324, 324))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(27, 27, 27))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        // TODO add your handling code here:
        String username = "root";
    String password = ""; 
    java.sql.Connection conn = null;

    try {
        // Kết nối cơ sở dữ liệu
        Class.forName("com.mysql.cj.jdbc.Driver");
        conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/nmcnpm_btl", username, password);

        // Duyệt qua tất cả các hàng trong bảng
        int rowCount = jTable1.getRowCount(); // Số lượng hàng trong bảng

        for (int i = 0; i < rowCount; i++) {
            // Lấy giá trị từ bảng
            Object idObj = jTable1.getValueAt(i, 0);
            Object quantityObj = jTable1.getValueAt(i, 1);
            
            // Kiểm tra null hoặc giá trị không hợp lệ
            int id = 0;
            if (idObj != null) {
                id = (int) idObj;
            } else {
                JOptionPane.showMessageDialog(this, "ID cannot be null!");
                return;
            }

            int quantity = 0;
            if (quantityObj != null) {
                quantity = (int) quantityObj;
            } else {
                JOptionPane.showMessageDialog(this, "Quantity cannot be null!");
                return;
            }

            // Kiểm tra xem ID có tồn tại trong bảng Inventory hay không
            String checkQuery = "SELECT COUNT(*) FROM Inventory WHERE item_id = ?";
            PreparedStatement checkStatement = conn.prepareStatement(checkQuery);
            checkStatement.setInt(1, id);

            ResultSet rs = checkStatement.executeQuery();
            if (rs.next() && rs.getInt(1) == 0) {
                // Nếu không tìm thấy ID trong bảng Inventory
                JOptionPane.showMessageDialog(this, "Cannot find this service with ID: " + id);
                continue; // Bỏ qua hàng hiện tại và tiếp tục với hàng tiếp theo
            }

            // Câu truy vấn SQL để cập nhật dữ liệu trong bảng Inventory
            String updateQuery = "UPDATE Inventory SET quantity = ? WHERE item_id = ?";
            PreparedStatement updateStatement = conn.prepareStatement(updateQuery);

            // Gán giá trị vào PreparedStatement
            updateStatement.setInt(1, quantity);
            updateStatement.setInt(2, id);

            // Thực thi câu lệnh UPDATE
            int rowsAffected = updateStatement.executeUpdate();

            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(this, "Updated Successfully!");
            }
        }

    } catch (SQLException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error while updating record: " + ex.getMessage());
    } catch (ClassNotFoundException ex) {
        ex.printStackTrace();
        Logger.getLogger(AddService.class.getName()).log(Level.SEVERE, null, ex);
    } catch (Exception ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
    } finally {
        // Đảm bảo đóng kết nối
        try {
            if (conn != null && !conn.isClosed()) {
                conn.close();
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
    }//GEN-LAST:event_jButton2MouseClicked

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:
        String username = "root";
    String password = ""; 
    java.sql.Connection conn = null;

    try {
        // Kết nối cơ sở dữ liệu
        Class.forName("com.mysql.cj.jdbc.Driver");
        conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/nmcnpm_btl", username, password);

        // Duyệt qua tất cả các hàng trong bảng
        int rowCount = jTable1.getRowCount(); // Số lượng hàng trong bảng
        //System.out.println("Row count: " + rowCount);  // In ra số hàng để kiểm tra

        for (int i = 0; i < rowCount; i++) {
            // Kiểm tra dữ liệu của các ô trong bảng
            Object idObj = jTable1.getValueAt(i, 0);
            Object quantityObj = jTable1.getValueAt(i, 1);
            
            // Kiểm tra null hoặc chuỗi rỗng cho từng giá trị
            int id = 0;
            if (idObj != null) {
                id = (int) idObj;
            } else {
                JOptionPane.showMessageDialog(this, "ID cannot be null!");
                return;  // Dừng lại nếu không có giá trị hợp lệ
            }
            
            // Kiểm tra xem ID có tồn tại trong bảng Inventory hay không
            String checkQuery = "SELECT COUNT(*) FROM Inventory WHERE item_id = ?";
            PreparedStatement checkStatement = conn.prepareStatement(checkQuery);
            checkStatement.setInt(1, id);

            ResultSet rs = checkStatement.executeQuery();
            if (rs.next() && rs.getInt(1) == 0) {
                // Nếu không tìm thấy ID trong bảng Inventory
                JOptionPane.showMessageDialog(this, "Cannot find this service with ID: " + id);
                continue; // Bỏ qua hàng hiện tại và tiếp tục với hàng tiếp theo
            }
            
            // Câu truy vấn SQL để thêm dữ liệu vào bảng Inventory
            String query1 = "DELETE FROM Inventory where item_id = ?;";
            PreparedStatement statement = conn.prepareStatement(query1);

            // Gán giá trị vào PreparedStatement
            statement.setInt(1, id);
           
            // Thực thi câu lệnh UPDATE
            int rowsAffected = statement.executeUpdate();

            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(this, "Deleted Successfully!");
            }
        }

    } catch (SQLException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error while adding record: " + ex.getMessage());
    } catch (ClassNotFoundException ex) {
        ex.printStackTrace();
        Logger.getLogger(AddService.class.getName()).log(Level.SEVERE, null, ex);
    } catch (Exception ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
    } finally {
        // Đảm bảo đóng kết nối
        try {
            if (conn != null && !conn.isClosed()) {
                conn.close();
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
    }//GEN-LAST:event_jButton1MouseClicked

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable1MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UpdateService.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UpdateService.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UpdateService.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UpdateService.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UpdateService().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
